"use strict";
var Sockets = (function () {
    function Sockets() {
    }
    Sockets.prototype.gameConnect = function (data, fn, socket, playerList) {
        console.log("gameConnect");
        console.dir(data);
        if (!data.token) {
            console.log("no token");
            fn({ data: "NO TOKEN", status: 403 });
            return;
        }
        for (var x in playerList) {
            if (playerList[x].token == data.token) {
                console.log('player already connected, deleting player..');
                playerList.splice(parseInt(x), 1);
                console.log('player Disconnected');
            }
        }
        var player = data.player;
        //adding player to server player list
        player.ID = socket.id;
        player.Token = data.token;
        socket.broadcast.emit('newPlayer', { player: player });
        //send back the playerList without the added player
        fn({ ID: socket.id, playerList: playerList });
        playerList.push(player);
        console.log('player added ' + playerList.length);
        return playerList;
    };
    Sockets.prototype.playerPosition = function (player, fn, socket, playerList) {
        if (!player.ID) {
            fn({ error: "Player has no ID" });
        }
        for (var x in playerList) {
            if (playerList[x].ID == player.ID) {
                playerList[x].position.x = player.position.x;
                playerList[x].position.z = player.position.z;
                playerList[x].position.y = player.position.y;
                playerList[x].rotation.x = player.rotation.x;
                playerList[x].rotation.z = player.rotation.z;
                playerList[x].rotation.y = player.rotation.y;
                fn({ playerList: playerList });
            }
        }
        return playerList;
    };
    Sockets.prototype.disconnect = function (player, fn, socket, playerList) {
        console.log(playerList);
        console.log('disconnect' + socket.id);
        if (playerList) {
            console.log(playerList.length);
            for (var x in playerList) {
                if (playerList[x].ID == socket.id) {
                    playerList.splice(parseInt(x), 1);
                    console.log('player Disconnected: ' + socket.id);
                }
            }
            return playerList;
        }
        else {
            return [];
        }
    };
    return Sockets;
}());
exports.Sockets = Sockets;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDO0lBQ0wsY0FBQztBQUFELENBdkVBLEFBdUVDLElBQUE7QUF2RVksZUFBTyxVQXVFbkIsQ0FBQSIsImZpbGUiOiJzZXJ2ZXIvc29ja2V0L2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFNvY2tldHMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG4gICAgZ2FtZUNvbm5lY3QoZGF0YSwgZm4sIHNvY2tldCwgcGxheWVyTGlzdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImdhbWVDb25uZWN0XCIpO1xuICAgICAgICBjb25zb2xlLmRpcihkYXRhKTtcbiAgICAgICAgaWYgKCFkYXRhLnRva2VuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIHRva2VuXCIpO1xuICAgICAgICAgICAgZm4oe2RhdGE6IFwiTk8gVE9LRU5cIiwgc3RhdHVzOiA0MDN9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHggaW4gcGxheWVyTGlzdCkge1xuICAgICAgICAgICAgaWYgKHBsYXllckxpc3RbeF0udG9rZW4gPT0gZGF0YS50b2tlbikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgYWxyZWFkeSBjb25uZWN0ZWQsIGRlbGV0aW5nIHBsYXllci4uJyk7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdC5zcGxpY2UocGFyc2VJbnQoeCksIDEpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgRGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwbGF5ZXIgPSBkYXRhLnBsYXllcjtcbiAgICAgICAgLy9hZGRpbmcgcGxheWVyIHRvIHNlcnZlciBwbGF5ZXIgbGlzdFxuICAgICAgICBwbGF5ZXIuSUQgPSBzb2NrZXQuaWQ7XG4gICAgICAgIHBsYXllci5Ub2tlbiA9IGRhdGEudG9rZW47XG4gICAgICAgIHNvY2tldC5icm9hZGNhc3QuZW1pdCgnbmV3UGxheWVyJywge3BsYXllcjogcGxheWVyfSk7XG5cbiAgICAgICAgLy9zZW5kIGJhY2sgdGhlIHBsYXllckxpc3Qgd2l0aG91dCB0aGUgYWRkZWQgcGxheWVyXG4gICAgICAgIGZuKHtJRDogc29ja2V0LmlkLCBwbGF5ZXJMaXN0OiBwbGF5ZXJMaXN0fSk7XG4gICAgICAgIHBsYXllckxpc3QucHVzaChwbGF5ZXIpO1xuICAgICAgICBjb25zb2xlLmxvZygncGxheWVyIGFkZGVkICcgKyBwbGF5ZXJMaXN0Lmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBwbGF5ZXJMaXN0O1xuICAgIH1cblxuXG4gICAgcGxheWVyUG9zaXRpb24ocGxheWVyLCBmbiwgc29ja2V0LCBwbGF5ZXJMaXN0KSB7XG4gICAgICAgIGlmICghcGxheWVyLklEKSB7XG4gICAgICAgICAgICBmbih7ZXJyb3I6IFwiUGxheWVyIGhhcyBubyBJRFwifSlcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB4IGluIHBsYXllckxpc3QpIHtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJMaXN0W3hdLklEID09IHBsYXllci5JRCkge1xuICAgICAgICAgICAgICAgIHBsYXllckxpc3RbeF0ucG9zaXRpb24ueCA9IHBsYXllci5wb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHBsYXllckxpc3RbeF0ucG9zaXRpb24ueiA9IHBsYXllci5wb3NpdGlvbi56O1xuICAgICAgICAgICAgICAgIHBsYXllckxpc3RbeF0ucG9zaXRpb24ueSA9IHBsYXllci5wb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHBsYXllckxpc3RbeF0ucm90YXRpb24ueCA9IHBsYXllci5yb3RhdGlvbi54O1xuICAgICAgICAgICAgICAgIHBsYXllckxpc3RbeF0ucm90YXRpb24ueiA9IHBsYXllci5yb3RhdGlvbi56O1xuICAgICAgICAgICAgICAgIHBsYXllckxpc3RbeF0ucm90YXRpb24ueSA9IHBsYXllci5yb3RhdGlvbi55O1xuXG4gICAgICAgICAgICAgICAgZm4oe3BsYXllckxpc3Q6IHBsYXllckxpc3R9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGxheWVyTGlzdDtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0KHBsYXllciwgZm4sIHNvY2tldCwgcGxheWVyTGlzdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXJMaXN0KTtcbiAgICAgICAgY29uc29sZS5sb2coJ2Rpc2Nvbm5lY3QnICsgc29ja2V0LmlkKTtcbiAgICAgICAgaWYgKHBsYXllckxpc3QpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBsYXllckxpc3QubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IHggaW4gcGxheWVyTGlzdCkge1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJMaXN0W3hdLklEID09IHNvY2tldC5pZCkge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJMaXN0LnNwbGljZShwYXJzZUludCh4KSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgRGlzY29ubmVjdGVkOiAnICsgc29ja2V0LmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGxheWVyTGlzdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIl19
