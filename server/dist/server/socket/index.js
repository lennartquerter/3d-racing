"use strict";
var Sockets = (function () {
    function Sockets() {
    }
    Sockets.prototype.gameConnect = function (data, fn, socket, playerList) {
        console.log("gameConnect");
        // console.dir(data);
        if (!data.token) {
            console.log("no token");
            fn({ data: "NO TOKEN", status: 403 });
            return;
        }
        for (var x in playerList) {
            if (playerList[x].token == data.token) {
                console.log('player already connected, deleting player..');
                playerList.splice(parseInt(x), 1);
                console.log('player Disconnected');
            }
        }
        var player = data.player;
        //adding player to server player list
        player.ID = socket.id;
        player.Token = data.token;
        socket.broadcast.emit('newPlayer', { player: player });
        //send back the playerList without the added player
        fn({ ID: socket.id, playerList: playerList });
        playerList.push(player);
        console.log('player added ' + playerList.length);
        return playerList;
    };
    Sockets.prototype.playerPosition = function (player, fn, socket, playerList) {
        if (!player.ID) {
            fn({ error: "Player has no ID" });
        }
        for (var x in playerList) {
            if (playerList[x].ID == player.ID) {
                playerList[x].position.x = player.position.x;
                playerList[x].position.z = player.position.z;
                playerList[x].position.y = player.position.y;
                playerList[x].rotation.x = player.rotation.x;
                playerList[x].rotation.z = player.rotation.z;
                playerList[x].rotation.y = player.rotation.y;
                fn({ playerList: playerList });
            }
        }
        return playerList;
    };
    Sockets.prototype.disconnect = function (player, fn, socket, playerList) {
        if (playerList) {
            console.log(playerList.length);
            for (var x in playerList) {
                if (playerList[x].ID == socket.id) {
                    playerList.splice(parseInt(x), 1);
                    console.log('player Disconnected: ' + socket.id);
                }
            }
            return playerList;
        }
        else {
            return [];
        }
    };
    return Sockets;
}());
exports.Sockets = Sockets;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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cnZlci9zb2NrZXQvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgU29ja2V0cyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB9XG5cbiAgICBnYW1lQ29ubmVjdChkYXRhLCBmbiwgc29ja2V0LCBwbGF5ZXJMaXN0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZ2FtZUNvbm5lY3RcIik7XG4gICAgICAgIC8vIGNvbnNvbGUuZGlyKGRhdGEpO1xuICAgICAgICBpZiAoIWRhdGEudG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gdG9rZW5cIik7XG4gICAgICAgICAgICBmbih7ZGF0YTogXCJOTyBUT0tFTlwiLCBzdGF0dXM6IDQwM30pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgeCBpbiBwbGF5ZXJMaXN0KSB7XG4gICAgICAgICAgICBpZiAocGxheWVyTGlzdFt4XS50b2tlbiA9PSBkYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3BsYXllciBhbHJlYWR5IGNvbm5lY3RlZCwgZGVsZXRpbmcgcGxheWVyLi4nKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXJMaXN0LnNwbGljZShwYXJzZUludCh4KSwgMSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3BsYXllciBEaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBsYXllciA9IGRhdGEucGxheWVyO1xuICAgICAgICAvL2FkZGluZyBwbGF5ZXIgdG8gc2VydmVyIHBsYXllciBsaXN0XG4gICAgICAgIHBsYXllci5JRCA9IHNvY2tldC5pZDtcbiAgICAgICAgcGxheWVyLlRva2VuID0gZGF0YS50b2tlbjtcbiAgICAgICAgc29ja2V0LmJyb2FkY2FzdC5lbWl0KCduZXdQbGF5ZXInLCB7cGxheWVyOiBwbGF5ZXJ9KTtcblxuICAgICAgICAvL3NlbmQgYmFjayB0aGUgcGxheWVyTGlzdCB3aXRob3V0IHRoZSBhZGRlZCBwbGF5ZXJcbiAgICAgICAgZm4oe0lEOiBzb2NrZXQuaWQsIHBsYXllckxpc3Q6IHBsYXllckxpc3R9KTtcbiAgICAgICAgcGxheWVyTGlzdC5wdXNoKHBsYXllcik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgYWRkZWQgJyArIHBsYXllckxpc3QubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHBsYXllckxpc3Q7XG4gICAgfVxuXG5cbiAgICBwbGF5ZXJQb3NpdGlvbihwbGF5ZXIsIGZuLCBzb2NrZXQsIHBsYXllckxpc3QpIHtcbiAgICAgICAgaWYgKCFwbGF5ZXIuSUQpIHtcbiAgICAgICAgICAgIGZuKHtlcnJvcjogXCJQbGF5ZXIgaGFzIG5vIElEXCJ9KVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHggaW4gcGxheWVyTGlzdCkge1xuICAgICAgICAgICAgaWYgKHBsYXllckxpc3RbeF0uSUQgPT0gcGxheWVyLklEKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdFt4XS5wb3NpdGlvbi54ID0gcGxheWVyLnBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdFt4XS5wb3NpdGlvbi56ID0gcGxheWVyLnBvc2l0aW9uLno7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdFt4XS5wb3NpdGlvbi55ID0gcGxheWVyLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdFt4XS5yb3RhdGlvbi54ID0gcGxheWVyLnJvdGF0aW9uLng7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdFt4XS5yb3RhdGlvbi56ID0gcGxheWVyLnJvdGF0aW9uLno7XG4gICAgICAgICAgICAgICAgcGxheWVyTGlzdFt4XS5yb3RhdGlvbi55ID0gcGxheWVyLnJvdGF0aW9uLnk7XG5cbiAgICAgICAgICAgICAgICBmbih7cGxheWVyTGlzdDogcGxheWVyTGlzdH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbGF5ZXJMaXN0O1xuICAgIH1cblxuICAgIGRpc2Nvbm5lY3QocGxheWVyLCBmbiwgc29ja2V0LCBwbGF5ZXJMaXN0KSB7XG4gICAgICAgIGlmIChwbGF5ZXJMaXN0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXJMaXN0Lmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCB4IGluIHBsYXllckxpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyTGlzdFt4XS5JRCA9PSBzb2NrZXQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyTGlzdC5zcGxpY2UocGFyc2VJbnQoeCksIDEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncGxheWVyIERpc2Nvbm5lY3RlZDogJyArIHNvY2tldC5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBsYXllckxpc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiJdfQ==
