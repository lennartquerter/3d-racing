/// <reference path="../../../typings/index.d.ts" />
"use strict";
var mongoose = require('mongoose');
var bcrypt = require('bcrypt');
var SALT_WORK_FACTOR = 10;
exports.GameStatsSchema = new mongoose.Schema({
    Won: { type: Number, required: true },
    Played: { type: Number, required: true },
    badges: { type: [String], required: false }
});
exports.ItemStatListSchema = new mongoose.Schema({
    Speed: { type: Number, required: true },
    Acceleration: { type: Number, required: true },
    ShieldProtection: { type: Number, required: true },
    ShieldRechargeRate: { type: Number, required: true },
    GunDamage: { type: Number, required: true },
    FireRate: { type: Number, required: true }
});
exports.UnlockedItemSchema = new mongoose.Schema({
    Name: { type: String, required: true },
    Stats: { type: exports.ItemStatListSchema, required: true },
    FilePath: { type: String, required: true },
    Description: { type: String, required: true }
});
exports.UnlockablesSchema = new mongoose.Schema({
    Bikes: { type: [exports.UnlockedItemSchema], required: false },
    Textures: { type: [exports.UnlockedItemSchema], required: false },
    Guns: { type: [exports.UnlockedItemSchema], required: false }
});
exports.UserSchema = new mongoose.Schema({
    CreatedAt: { type: String, 'default': Date.now },
    UpdatedAt: { type: String, 'default': Date.now },
    UserName: { type: String, required: true, index: { unique: true } },
    Password: { type: String, required: true },
    Email: { type: String, required: true },
    GameStats: { type: exports.GameStatsSchema, required: true },
    Unlockables: { type: exports.UnlockablesSchema, required: true }
});
exports.UserSchema.pre('save', function (next) {
    var user = this;
    // only hash the password if it has been modified (or is new)
    if (!user.isModified('Password'))
        return next();
    // generate a salt
    bcrypt.genSalt(SALT_WORK_FACTOR, function (err, salt) {
        if (err)
            return next(err);
        // hash the password using our new salt
        bcrypt.hash(user.Password, salt, function (err, hash) {
            if (err)
                return next(err);
            // override the cleartext password with the hashed one
            user.Password = hash;
            next();
        });
    });
});
exports.UserSchema.methods.comparePassword = function (candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.Password, function (err, isMatch) {
        if (err)
            return cb(err);
        cb(null, isMatch);
    });
};
exports.GameStats = mongoose.model('GameStats', exports.GameStatsSchema);
exports.ItemStatList = mongoose.model('ItemStatList', exports.ItemStatListSchema);
exports.UnlockedItem = mongoose.model('UnlockedItem', exports.UnlockedItemSchema);
exports.Unlockables = mongoose.model('Unlockables', exports.UnlockablesSchema);
exports.User = mongoose.model('User', exports.UserSchema);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
