/// <reference path="../../../typings/index.d.ts" />
"use strict";
var database_schema_1 = require('../database/database.schema');
var ApiComponent = (function () {
    function ApiComponent() {
        var _this = this;
        this.request = function (req, res, type) {
            if (type == 'login') {
                _this.login(req, res);
            }
            else if (type == 'register') {
                _this.register(req, res);
            }
        };
    }
    ApiComponent.prototype.login = function (data, res) {
        var userCred = new Buffer(data, 'base64').toString().split('::');
        database_schema_1.User.findOne({ UserName: userCred[0] }, function (err, user) {
            if (err) {
                console.log('user ' + userCred[0] + ' not found or error:' + err);
                res.send({ status: 404, data: "Not found" });
            }
            console.log(user);
            if (!user) {
                console.log('user ' + userCred[0] + ' not found');
                res.send({ status: 404, data: "Not found" });
            }
            user.comparePassword(userCred[1], function (err, isMatch) {
                if (err) {
                    console.log('user ' + userCred[0] + ' not password compare error:' + err);
                    res.send({ status: 500, data: "password error" });
                }
                if (isMatch) {
                    var token = new Buffer(user.UserName + "::" + user.Password, 'base64').toString();
                    delete user.Password;
                    res.send({ status: 200, data: { user: user, token: token } });
                }
                else {
                    res.send({ status: 403, data: "Password does not match" });
                }
            });
        });
    };
    ApiComponent.prototype.register = function (data, res) {
        console.log(data);
        var userRegister = new Buffer(data, 'base64').toString().split('::');
        console.log(userRegister);
        var unlockables = new database_schema_1.Unlockables({
            Bikes: [],
            Textures: [],
            Guns: []
        });
        var gameStats = new database_schema_1.GameStats({
            Won: 0,
            Played: 0,
            Badges: []
        });
        var user = new database_schema_1.User({
            UserName: userRegister[0],
            Password: userRegister[1],
            Email: userRegister[2],
            GameStats: gameStats,
            Unlockables: unlockables
        });
        user.save(function (err, user) {
            if (err) {
                console.log('Could not save player: ' + err);
                res.send({ status: 500, data: "Not Saved" });
            }
            console.log("Saved: ");
            console.dir(user);
            res.send({ status: 201, data: "Saved" });
        });
    };
    return ApiComponent;
}());
exports.ApiComponent = ApiComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
